//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __CLASS_ITEM_EXPR_AST_HPP__
#define __CLASS_ITEM_EXPR_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class SAST;
class PublicOptAST;
class TypeAST;
class IdAST;
class FuncExprAST;

class ClassItemExprAST_7: IAST {
public:
	// [part of] class_item_expr ::= func_expr | ';'

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ClassItemExprAST_7", _pos))
			co_return;
		auto _7_0_enum = _try_parse_7_0 (_pos);
		while (_7_0_enum.MoveNext ()) {
			ValidIndex_7 = 0;
			co_yield _7_0_enum.Current;
		}
		auto _7_1_enum = _try_parse_7_1 (_pos);
		while (_7_1_enum.MoveNext ()) {
			ValidIndex_7 = 1;
			co_yield _7_1_enum.Current;
		}
		Parser->UnReg ("ClassItemExprAST_7", _pos);
	}

	IEnumerator<int> _try_parse_7_0 (int _pos);
	IEnumerator<int> _try_parse_7_1 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<FuncExprAST> Value_7_0 = nullptr;
	std::string Value_7_1 = "";
	int ValidIndex_7 = -1;
};



class ClassItemExprAST: IAST {
public:
	// class_item_expr ::= s public_opt s type s id s (func_expr | ';')

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ClassItemExprAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				auto _2_enum = _try_parse_2 (_1_enum.Current);
				while (_2_enum.MoveNext ()) {
					auto _3_enum = _try_parse_3 (_2_enum.Current);
					while (_3_enum.MoveNext ()) {
						auto _4_enum = _try_parse_4 (_3_enum.Current);
						while (_4_enum.MoveNext ()) {
							auto _5_enum = _try_parse_5 (_4_enum.Current);
							while (_5_enum.MoveNext ()) {
								auto _6_enum = _try_parse_6 (_5_enum.Current);
								while (_6_enum.MoveNext ()) {
									auto _7_enum = _try_parse_7 (_6_enum.Current);
									while (_7_enum.MoveNext ()) {
										co_yield _7_enum.Current;
									}
								}
							}
						}
					}
				}
			}
		}
		Parser->UnReg ("ClassItemExprAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	IEnumerator<int> _try_parse_2 (int _pos);
	IEnumerator<int> _try_parse_3 (int _pos);
	IEnumerator<int> _try_parse_4 (int _pos);
	IEnumerator<int> _try_parse_5 (int _pos);
	IEnumerator<int> _try_parse_6 (int _pos);
	IEnumerator<int> _try_parse_7 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<SAST> Value_0 = nullptr;
	std::shared_ptr<PublicOptAST> Value_1 = nullptr;
	std::shared_ptr<SAST> Value_2 = nullptr;
	std::shared_ptr<TypeAST> Value_3 = nullptr;
	std::shared_ptr<SAST> Value_4 = nullptr;
	std::shared_ptr<IdAST> Value_5 = nullptr;
	std::shared_ptr<SAST> Value_6 = nullptr;
	std::shared_ptr<ClassItemExprAST_7> Value_7;
};



#include "SAST.hpp"
#include "PublicOptAST.hpp"
#include "TypeAST.hpp"
#include "IdAST.hpp"
#include "FuncExprAST.hpp"



inline bool ClassItemExprAST_7::IsValid () {
	return ValidIndex_7 >= 0;
}

inline void ClassItemExprAST_7::PrintTree (int _indent) {
	if (ValidIndex_7 == 0) {
		if (Value_7_0 && Value_7_0->IsValid ()) {
			Value_7_0->PrintTree (_indent + 1);
		}
	} else if (ValidIndex_7 == 1) {
		std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_7_1 << ']' << std::endl;
	}
}

inline int ClassItemExprAST_7::size () {
	int _len = 0;
	_len += Value_7_0->size ();
	_len += Value_7_1.size ();
	return _len;
}
inline IEnumerator<int> ClassItemExprAST_7::_try_parse_7_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<FuncExprAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_7_0 = _o;
		co_yield _enum.Current;
		Value_7_0 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST_7::_try_parse_7_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, ";")) {
		Value_7_1 = ";";
		co_yield _pos + Value_7_1.size ();
		Value_7_1 = "";
	}
}

inline bool ClassItemExprAST::IsValid () {
	return ((Value_0 != nullptr && Value_0->IsValid ()) && (Value_1 != nullptr && Value_1->IsValid ()) && (Value_2 != nullptr && Value_2->IsValid ()) && (Value_3 != nullptr && Value_3->IsValid ()) && (Value_4 != nullptr && Value_4->IsValid ()) && (Value_5 != nullptr && Value_5->IsValid ()) && (Value_6 != nullptr && Value_6->IsValid ()) && Value_7->IsValid ());
}

inline void ClassItemExprAST::PrintTree (int _indent) {
	if (Value_0 && Value_0->IsValid ()) {
		Value_0->PrintTree (_indent + 1);
	}
	if (Value_1 && Value_1->IsValid ()) {
		Value_1->PrintTree (_indent + 1);
	}
	if (Value_2 && Value_2->IsValid ()) {
		Value_2->PrintTree (_indent + 1);
	}
	if (Value_3 && Value_3->IsValid ()) {
		Value_3->PrintTree (_indent + 1);
	}
	if (Value_4 && Value_4->IsValid ()) {
		Value_4->PrintTree (_indent + 1);
	}
	if (Value_5 && Value_5->IsValid ()) {
		Value_5->PrintTree (_indent + 1);
	}
	if (Value_6 && Value_6->IsValid ()) {
		Value_6->PrintTree (_indent + 1);
	}
	Value_7->PrintTree (_indent + 1);
}

inline int ClassItemExprAST::size () {
	int _len = 0;
	_len += Value_0->size ();
	_len += Value_1->size ();
	_len += Value_2->size ();
	_len += Value_3->size ();
	_len += Value_4->size ();
	_len += Value_5->size ();
	_len += Value_6->size ();
	_len += Value_7->size ();
	return _len;
}
inline IEnumerator<int> ClassItemExprAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_0 = _o;
		co_yield _enum.Current;
		Value_0 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<PublicOptAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_1 = _o;
		co_yield _enum.Current;
		Value_1 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_2 = _o;
		co_yield _enum.Current;
		Value_2 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_3 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<TypeAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_3 = _o;
		co_yield _enum.Current;
		Value_3 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_4 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_4 = _o;
		co_yield _enum.Current;
		Value_4 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_5 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_5 = _o;
		co_yield _enum.Current;
		Value_5 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_6 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6 = _o;
		co_yield _enum.Current;
		Value_6 = nullptr;
	}
}

inline IEnumerator<int> ClassItemExprAST::_try_parse_7 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<ClassItemExprAST_7> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_7 = _o;
		co_yield _enum.Current;
		Value_7 = nullptr;
	}
}



#endif // __CLASS_ITEM_EXPR_AST_HPP__
