//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __PROGRAM_AST_HPP__
#define __PROGRAM_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class UseExprAST;
class ClassExprAST;
class SAST;

class ProgramAST: IAST {
public:
	// program ::= use_expr* class_expr* s

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ProgramAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				auto _2_enum = _try_parse_2 (_1_enum.Current);
				while (_2_enum.MoveNext ()) {
					co_yield _2_enum.Current;
				}
			}
		}
		Parser->UnReg ("ProgramAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	IEnumerator<int> _try_parse_2 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::vector<std::shared_ptr<UseExprAST>> Value_0;
	std::vector<std::shared_ptr<ClassExprAST>> Value_1;
	std::shared_ptr<SAST> Value_2 = nullptr;
};



#include "UseExprAST.hpp"
#include "ClassExprAST.hpp"
#include "SAST.hpp"



inline bool ProgramAST::IsValid () {
	return (true && true && (Value_2 != nullptr && Value_2->IsValid ()));
}

inline void ProgramAST::PrintTree (int _indent) {
	for (auto &_val : Value_0) _val->PrintTree (_indent + 1);
	for (auto &_val : Value_1) _val->PrintTree (_indent + 1);
	if (Value_2 && Value_2->IsValid ()) {
		Value_2->PrintTree (_indent + 1);
	}
}

inline int ProgramAST::size () {
	int _len = 0;
	for (size_t i = 0; i < Value_0.size (); ++i)
		_len += Value_0 [i]->size ();
	for (size_t i = 0; i < Value_1.size (); ++i)
		_len += Value_1 [i]->size ();
	_len += Value_2->size ();
	return _len;
}
inline IEnumerator<int> ProgramAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<UseExprAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_0.push_back (_o);
		co_yield _enum.Current;
		auto _enum1 = _try_parse_0 (_enum.Current);
		while (_enum1.MoveNext ())
			co_yield _enum1.Current;
		Value_0.pop_back ();
	}
	co_yield _pos;
}

inline IEnumerator<int> ProgramAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<ClassExprAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_1.push_back (_o);
		co_yield _enum.Current;
		auto _enum1 = _try_parse_1 (_enum.Current);
		while (_enum1.MoveNext ())
			co_yield _enum1.Current;
		Value_1.pop_back ();
	}
	co_yield _pos;
}

inline IEnumerator<int> ProgramAST::_try_parse_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_2 = _o;
		co_yield _enum.Current;
		Value_2 = nullptr;
	}
}



#endif // __PROGRAM_AST_HPP__
