//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __IDS_AST_HPP__
#define __IDS_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class IdAST;

class IdsAST_1: IAST {
public:
	// [part of] ids ::= '.' id

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("IdsAST_1", _pos))
			co_return;
		auto _1_0_enum = _try_parse_1_0 (_pos);
		while (_1_0_enum.MoveNext ()) {
			auto _1_1_enum = _try_parse_1_1 (_1_0_enum.Current);
			while (_1_1_enum.MoveNext ()) {
				co_yield _1_1_enum.Current;
			}
		}
		co_yield _pos;
		Parser->UnReg ("IdsAST_1", _pos);
	}

	IEnumerator<int> _try_parse_1_0 (int _pos);
	IEnumerator<int> _try_parse_1_1 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::string Value_1_0 = "";
	std::shared_ptr<IdAST> Value_1_1 = nullptr;
};



class IdsAST: IAST {
public:
	// ids ::= id ('.' id)*

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("IdsAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				co_yield _1_enum.Current;
			}
		}
		Parser->UnReg ("IdsAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<IdAST> Value_0 = nullptr;
	std::vector<std::shared_ptr<IdsAST_1>> Value_1;
};



#include "IdAST.hpp"



inline bool IdsAST_1::IsValid () {
	return true;
}

inline void IdsAST_1::PrintTree (int _indent) {
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_1_0 << ']' << std::endl;
	if (Value_1_1 && Value_1_1->IsValid ()) {
		Value_1_1->PrintTree (_indent + 1);
	}
}

inline int IdsAST_1::size () {
	int _len = 0;
	_len += Value_1_0.size ();
	_len += Value_1_1->size ();
	return _len;
}
inline IEnumerator<int> IdsAST_1::_try_parse_1_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, ".")) {
		Value_1_0 = ".";
		co_yield _pos + Value_1_0.size ();
		Value_1_0 = "";
	}
}

inline IEnumerator<int> IdsAST_1::_try_parse_1_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_1_1 = _o;
		co_yield _enum.Current;
		Value_1_1 = nullptr;
	}
}

inline bool IdsAST::IsValid () {
	return ((Value_0 != nullptr && Value_0->IsValid ()) && true);
}

inline void IdsAST::PrintTree (int _indent) {
	if (Value_0 && Value_0->IsValid ()) {
		Value_0->PrintTree (_indent + 1);
	}
	for (size_t i = 0; i < Value_1.size (); ++i)
		Value_1 [i]->PrintTree (_indent + 1);
}

inline int IdsAST::size () {
	int _len = 0;
	_len += Value_0->size ();
	for (size_t i = 0; i < Value_1.size (); ++i)
		_len += Value_1 [i]->size ();
	return _len;
}
inline IEnumerator<int> IdsAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_0 = _o;
		co_yield _enum.Current;
		Value_0 = nullptr;
	}
}

inline IEnumerator<int> IdsAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdsAST_1> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		int _list_pos = Value_1.size ();
		Value_1.push_back (_o);
		co_yield _enum.Current;
		auto _enum1 = _try_parse_1 (_enum.Current);
		while (_enum1.MoveNext ())
			co_yield _enum1.Current;
		Value_1.erase (Value_1.begin () + _list_pos);
	}
	co_yield _pos;
}



#endif // __IDS_AST_HPP__
