//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __USE_EXPR_AST_HPP__
#define __USE_EXPR_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class SAST;
class IdsAST;

class UseExprAST: IAST {
public:
	// use_expr ::= s 'use' s ids s ';'

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("UseExprAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				auto _2_enum = _try_parse_2 (_1_enum.Current);
				while (_2_enum.MoveNext ()) {
					auto _3_enum = _try_parse_3 (_2_enum.Current);
					while (_3_enum.MoveNext ()) {
						auto _4_enum = _try_parse_4 (_3_enum.Current);
						while (_4_enum.MoveNext ()) {
							auto _5_enum = _try_parse_5 (_4_enum.Current);
							while (_5_enum.MoveNext ()) {
								co_yield _5_enum.Current;
							}
						}
					}
				}
			}
		}
		Parser->UnReg ("UseExprAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	IEnumerator<int> _try_parse_2 (int _pos);
	IEnumerator<int> _try_parse_3 (int _pos);
	IEnumerator<int> _try_parse_4 (int _pos);
	IEnumerator<int> _try_parse_5 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<SAST> Value_0 = nullptr;
	std::string Value_1 = "";
	std::shared_ptr<SAST> Value_2 = nullptr;
	std::shared_ptr<IdsAST> Value_3 = nullptr;
	std::shared_ptr<SAST> Value_4 = nullptr;
	std::string Value_5 = "";
};



#include "SAST.hpp"
#include "IdsAST.hpp"



inline bool UseExprAST::IsValid () {
	return ((Value_0 != nullptr && Value_0->IsValid ()) && Value_1.size () > 0 && (Value_2 != nullptr && Value_2->IsValid ()) && (Value_3 != nullptr && Value_3->IsValid ()) && (Value_4 != nullptr && Value_4->IsValid ()) && Value_5.size () > 0);
}

inline void UseExprAST::PrintTree (int _indent) {
	if (Value_0 && Value_0->IsValid ()) {
		Value_0->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_1 << ']' << std::endl;
	if (Value_2 && Value_2->IsValid ()) {
		Value_2->PrintTree (_indent + 1);
	}
	if (Value_3 && Value_3->IsValid ()) {
		Value_3->PrintTree (_indent + 1);
	}
	if (Value_4 && Value_4->IsValid ()) {
		Value_4->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_5 << ']' << std::endl;
}

inline int UseExprAST::size () {
	int _len = 0;
	_len += Value_0->size ();
	_len += Value_1.size ();
	_len += Value_2->size ();
	_len += Value_3->size ();
	_len += Value_4->size ();
	_len += Value_5.size ();
	return _len;
}
inline IEnumerator<int> UseExprAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_0 = _o;
		co_yield _enum.Current;
		Value_0 = nullptr;
	}
}

inline IEnumerator<int> UseExprAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, "use")) {
		Value_1 = "use";
		co_yield _pos + Value_1.size ();
		Value_1 = "";
	}
}

inline IEnumerator<int> UseExprAST::_try_parse_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_2 = _o;
		co_yield _enum.Current;
		Value_2 = nullptr;
	}
}

inline IEnumerator<int> UseExprAST::_try_parse_3 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdsAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_3 = _o;
		co_yield _enum.Current;
		Value_3 = nullptr;
	}
}

inline IEnumerator<int> UseExprAST::_try_parse_4 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_4 = _o;
		co_yield _enum.Current;
		Value_4 = nullptr;
	}
}

inline IEnumerator<int> UseExprAST::_try_parse_5 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, ";")) {
		Value_5 = ";";
		co_yield _pos + Value_5.size ();
		Value_5 = "";
	}
}



#endif // __USE_EXPR_AST_HPP__
