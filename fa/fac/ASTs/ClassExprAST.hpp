//
// This file is automatically generated by Facc
// https://github.com/fawdlstty/Fapp
//



#ifndef __CLASS_EXPR_AST_HPP__
#define __CLASS_EXPR_AST_HPP__



#include <iostream>
#include <memory>
#include <optional>
#include <string>
#include <string_view>

#include <fmt/core.h>

#include <Facc/IEnumerator.hpp>
#include <Facc/Parser/IAST.h>
#include <Facc/Parser/AstParser.hpp>



class SAST;
class PublicOptAST;
class IdAST;
class IdsAST;
class ClassItemExprAST;

class ClassExprAST_6_5: IAST {
public:
	// [part of] [part of] class_expr ::= ',' s ids

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ClassExprAST_6_5", _pos))
			co_return;
		auto _6_5_0_enum = _try_parse_6_5_0 (_pos);
		while (_6_5_0_enum.MoveNext ()) {
			auto _6_5_1_enum = _try_parse_6_5_1 (_6_5_0_enum.Current);
			while (_6_5_1_enum.MoveNext ()) {
				auto _6_5_2_enum = _try_parse_6_5_2 (_6_5_1_enum.Current);
				while (_6_5_2_enum.MoveNext ()) {
					co_yield _6_5_2_enum.Current;
				}
			}
		}
		co_yield _pos;
		Parser->UnReg ("ClassExprAST_6_5", _pos);
	}

	IEnumerator<int> _try_parse_6_5_0 (int _pos);
	IEnumerator<int> _try_parse_6_5_1 (int _pos);
	IEnumerator<int> _try_parse_6_5_2 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::string Value_6_5_0 = "";
	std::shared_ptr<SAST> Value_6_5_1 = nullptr;
	std::shared_ptr<IdsAST> Value_6_5_2 = nullptr;
};



class ClassExprAST_6: IAST {
public:
	// [part of] class_expr ::= s ':' s ids s (',' s ids)*

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ClassExprAST_6", _pos))
			co_return;
		auto _6_0_enum = _try_parse_6_0 (_pos);
		while (_6_0_enum.MoveNext ()) {
			auto _6_1_enum = _try_parse_6_1 (_6_0_enum.Current);
			while (_6_1_enum.MoveNext ()) {
				auto _6_2_enum = _try_parse_6_2 (_6_1_enum.Current);
				while (_6_2_enum.MoveNext ()) {
					auto _6_3_enum = _try_parse_6_3 (_6_2_enum.Current);
					while (_6_3_enum.MoveNext ()) {
						auto _6_4_enum = _try_parse_6_4 (_6_3_enum.Current);
						while (_6_4_enum.MoveNext ()) {
							auto _6_5_enum = _try_parse_6_5 (_6_4_enum.Current);
							while (_6_5_enum.MoveNext ()) {
								co_yield _6_5_enum.Current;
							}
						}
					}
				}
			}
		}
		co_yield _pos;
		Parser->UnReg ("ClassExprAST_6", _pos);
	}

	IEnumerator<int> _try_parse_6_0 (int _pos);
	IEnumerator<int> _try_parse_6_1 (int _pos);
	IEnumerator<int> _try_parse_6_2 (int _pos);
	IEnumerator<int> _try_parse_6_3 (int _pos);
	IEnumerator<int> _try_parse_6_4 (int _pos);
	IEnumerator<int> _try_parse_6_5 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<SAST> Value_6_0 = nullptr;
	std::string Value_6_1 = "";
	std::shared_ptr<SAST> Value_6_2 = nullptr;
	std::shared_ptr<IdsAST> Value_6_3 = nullptr;
	std::shared_ptr<SAST> Value_6_4 = nullptr;
	std::vector<std::shared_ptr<ClassExprAST_6_5>> Value_6_5;
};



class ClassExprAST: IAST {
public:
	// class_expr ::= s public_opt s 'class' s id (s ':' s ids s (',' s ids)*)? s '{' class_item_expr* s '}'

	std::shared_ptr<AstParser> Parser;

	IEnumerator<int> TryParse (int _pos) override {
		if (!Parser->TryReg ("ClassExprAST", _pos))
			co_return;
		auto _0_enum = _try_parse_0 (_pos);
		while (_0_enum.MoveNext ()) {
			auto _1_enum = _try_parse_1 (_0_enum.Current);
			while (_1_enum.MoveNext ()) {
				auto _2_enum = _try_parse_2 (_1_enum.Current);
				while (_2_enum.MoveNext ()) {
					auto _3_enum = _try_parse_3 (_2_enum.Current);
					while (_3_enum.MoveNext ()) {
						auto _4_enum = _try_parse_4 (_3_enum.Current);
						while (_4_enum.MoveNext ()) {
							auto _5_enum = _try_parse_5 (_4_enum.Current);
							while (_5_enum.MoveNext ()) {
								auto _6_enum = _try_parse_6 (_5_enum.Current);
								while (_6_enum.MoveNext ()) {
									auto _7_enum = _try_parse_7 (_6_enum.Current);
									while (_7_enum.MoveNext ()) {
										auto _8_enum = _try_parse_8 (_7_enum.Current);
										while (_8_enum.MoveNext ()) {
											auto _9_enum = _try_parse_9 (_8_enum.Current);
											while (_9_enum.MoveNext ()) {
												auto _10_enum = _try_parse_10 (_9_enum.Current);
												while (_10_enum.MoveNext ()) {
													auto _11_enum = _try_parse_11 (_10_enum.Current);
													while (_11_enum.MoveNext ()) {
														co_yield _11_enum.Current;
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
		Parser->UnReg ("ClassExprAST", _pos);
	}

	IEnumerator<int> _try_parse_0 (int _pos);
	IEnumerator<int> _try_parse_1 (int _pos);
	IEnumerator<int> _try_parse_2 (int _pos);
	IEnumerator<int> _try_parse_3 (int _pos);
	IEnumerator<int> _try_parse_4 (int _pos);
	IEnumerator<int> _try_parse_5 (int _pos);
	IEnumerator<int> _try_parse_6 (int _pos);
	IEnumerator<int> _try_parse_7 (int _pos);
	IEnumerator<int> _try_parse_8 (int _pos);
	IEnumerator<int> _try_parse_9 (int _pos);
	IEnumerator<int> _try_parse_10 (int _pos);
	IEnumerator<int> _try_parse_11 (int _pos);
	bool IsValid () override;
	void PrintTree (int _indent);
	int size ();

	std::shared_ptr<SAST> Value_0 = nullptr;
	std::shared_ptr<PublicOptAST> Value_1 = nullptr;
	std::shared_ptr<SAST> Value_2 = nullptr;
	std::string Value_3 = "";
	std::shared_ptr<SAST> Value_4 = nullptr;
	std::shared_ptr<IdAST> Value_5 = nullptr;
	std::shared_ptr<ClassExprAST_6> Value_6;
	std::shared_ptr<SAST> Value_7 = nullptr;
	std::string Value_8 = "";
	std::vector<std::shared_ptr<ClassItemExprAST>> Value_9;
	std::shared_ptr<SAST> Value_10 = nullptr;
	std::string Value_11 = "";
};



#include "SAST.hpp"
#include "PublicOptAST.hpp"
#include "IdAST.hpp"
#include "IdsAST.hpp"
#include "ClassItemExprAST.hpp"



inline bool ClassExprAST_6_5::IsValid () {
	return true;
}

inline void ClassExprAST_6_5::PrintTree (int _indent) {
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_6_5_0 << ']' << std::endl;
	if (Value_6_5_1 && Value_6_5_1->IsValid ()) {
		Value_6_5_1->PrintTree (_indent + 1);
	}
	if (Value_6_5_2 && Value_6_5_2->IsValid ()) {
		Value_6_5_2->PrintTree (_indent + 1);
	}
}

inline int ClassExprAST_6_5::size () {
	int _len = 0;
	_len += Value_6_5_0.size ();
	_len += Value_6_5_1->size ();
	_len += Value_6_5_2->size ();
	return _len;
}
inline IEnumerator<int> ClassExprAST_6_5::_try_parse_6_5_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, ",")) {
		Value_6_5_0 = ",";
		co_yield _pos + Value_6_5_0.size ();
		Value_6_5_0 = "";
	}
}

inline IEnumerator<int> ClassExprAST_6_5::_try_parse_6_5_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_5_1 = _o;
		co_yield _enum.Current;
		Value_6_5_1 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST_6_5::_try_parse_6_5_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdsAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_5_2 = _o;
		co_yield _enum.Current;
		Value_6_5_2 = nullptr;
	}
}

inline bool ClassExprAST_6::IsValid () {
	return true;
}

inline void ClassExprAST_6::PrintTree (int _indent) {
	if (Value_6_0 && Value_6_0->IsValid ()) {
		Value_6_0->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_6_1 << ']' << std::endl;
	if (Value_6_2 && Value_6_2->IsValid ()) {
		Value_6_2->PrintTree (_indent + 1);
	}
	if (Value_6_3 && Value_6_3->IsValid ()) {
		Value_6_3->PrintTree (_indent + 1);
	}
	if (Value_6_4 && Value_6_4->IsValid ()) {
		Value_6_4->PrintTree (_indent + 1);
	}
	for (size_t i = 0; i < Value_6_5.size (); ++i)
		Value_6_5 [i]->PrintTree (_indent + 1);
}

inline int ClassExprAST_6::size () {
	int _len = 0;
	_len += Value_6_0->size ();
	_len += Value_6_1.size ();
	_len += Value_6_2->size ();
	_len += Value_6_3->size ();
	_len += Value_6_4->size ();
	for (size_t i = 0; i < Value_6_5.size (); ++i)
		_len += Value_6_5 [i]->size ();
	return _len;
}
inline IEnumerator<int> ClassExprAST_6::_try_parse_6_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_0 = _o;
		co_yield _enum.Current;
		Value_6_0 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST_6::_try_parse_6_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, ":")) {
		Value_6_1 = ":";
		co_yield _pos + Value_6_1.size ();
		Value_6_1 = "";
	}
}

inline IEnumerator<int> ClassExprAST_6::_try_parse_6_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_2 = _o;
		co_yield _enum.Current;
		Value_6_2 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST_6::_try_parse_6_3 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdsAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_3 = _o;
		co_yield _enum.Current;
		Value_6_3 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST_6::_try_parse_6_4 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6_4 = _o;
		co_yield _enum.Current;
		Value_6_4 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST_6::_try_parse_6_5 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<ClassExprAST_6_5> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		int _list_pos = Value_6_5.size ();
		Value_6_5.push_back (_o);
		co_yield _enum.Current;
		auto _enum1 = _try_parse_6_5 (_enum.Current);
		while (_enum1.MoveNext ())
			co_yield _enum1.Current;
		Value_6_5.erase (Value_6_5.begin () + _list_pos);
	}
	co_yield _pos;
}

inline bool ClassExprAST::IsValid () {
	return ((Value_0 != nullptr && Value_0->IsValid ()) && (Value_1 != nullptr && Value_1->IsValid ()) && (Value_2 != nullptr && Value_2->IsValid ()) && Value_3.size () > 0 && (Value_4 != nullptr && Value_4->IsValid ()) && (Value_5 != nullptr && Value_5->IsValid ()) && true && (Value_7 != nullptr && Value_7->IsValid ()) && Value_8.size () > 0 && true && (Value_10 != nullptr && Value_10->IsValid ()) && Value_11.size () > 0);
}

inline void ClassExprAST::PrintTree (int _indent) {
	if (Value_0 && Value_0->IsValid ()) {
		Value_0->PrintTree (_indent + 1);
	}
	if (Value_1 && Value_1->IsValid ()) {
		Value_1->PrintTree (_indent + 1);
	}
	if (Value_2 && Value_2->IsValid ()) {
		Value_2->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_3 << ']' << std::endl;
	if (Value_4 && Value_4->IsValid ()) {
		Value_4->PrintTree (_indent + 1);
	}
	if (Value_5 && Value_5->IsValid ()) {
		Value_5->PrintTree (_indent + 1);
	}
	Value_6->PrintTree (_indent + 1);
	if (Value_7 && Value_7->IsValid ()) {
		Value_7->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_8 << ']' << std::endl;
	for (auto &_val : Value_9) _val->PrintTree (_indent + 1);
	if (Value_10 && Value_10->IsValid ()) {
		Value_10->PrintTree (_indent + 1);
	}
	std::cout << std::string ((_indent + 1) * 4, ' ') << '[' << Value_11 << ']' << std::endl;
}

inline int ClassExprAST::size () {
	int _len = 0;
	_len += Value_0->size ();
	_len += Value_1->size ();
	_len += Value_2->size ();
	_len += Value_3.size ();
	_len += Value_4->size ();
	_len += Value_5->size ();
	_len += Value_6->size ();
	_len += Value_7->size ();
	_len += Value_8.size ();
	for (size_t i = 0; i < Value_9.size (); ++i)
		_len += Value_9 [i]->size ();
	_len += Value_10->size ();
	_len += Value_11.size ();
	return _len;
}
inline IEnumerator<int> ClassExprAST::_try_parse_0 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_0 = _o;
		co_yield _enum.Current;
		Value_0 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_1 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<PublicOptAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_1 = _o;
		co_yield _enum.Current;
		Value_1 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_2 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_2 = _o;
		co_yield _enum.Current;
		Value_2 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_3 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, "class")) {
		Value_3 = "class";
		co_yield _pos + Value_3.size ();
		Value_3 = "";
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_4 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_4 = _o;
		co_yield _enum.Current;
		Value_4 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_5 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<IdAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_5 = _o;
		co_yield _enum.Current;
		Value_5 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_6 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<ClassExprAST_6> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_6 = _o;
		co_yield _enum.Current;
		Value_6 = nullptr;
	}
	co_yield _pos;
}
inline IEnumerator<int> ClassExprAST::_try_parse_7 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_7 = _o;
		co_yield _enum.Current;
		Value_7 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_8 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, "{")) {
		Value_8 = "{";
		co_yield _pos + Value_8.size ();
		Value_8 = "";
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_9 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<ClassItemExprAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_9.push_back (_o);
		co_yield _enum.Current;
		auto _enum1 = _try_parse_9 (_enum.Current);
		while (_enum1.MoveNext ())
			co_yield _enum1.Current;
		Value_9.pop_back ();
	}
	co_yield _pos;
}

inline IEnumerator<int> ClassExprAST::_try_parse_10 (int _pos) {
	Parser->SetErrorPos (_pos);
	auto _o = std::make_shared<SAST> ();
	_o->Parser = Parser;
	auto _enum = _o->TryParse (_pos);
	while (_enum.MoveNext ()) {
		Value_10 = _o;
		co_yield _enum.Current;
		Value_10 = nullptr;
	}
}

inline IEnumerator<int> ClassExprAST::_try_parse_11 (int _pos) {
	Parser->SetErrorPos (_pos);
	if (Parser->TryMatchString (_pos, "}")) {
		Value_11 = "}";
		co_yield _pos + Value_11.size ();
		Value_11 = "";
	}
}



#endif // __CLASS_EXPR_AST_HPP__
